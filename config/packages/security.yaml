security:
    #enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
           App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
         app_user_provider:
            entity:
                class: App\Entity\User
                property: login

    role_hierarchy:
        ROLE_ADMIN: [ROLE_PROF, ROLE_STAGIAIRE, ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
             # Permet l'authentification par formulaire
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: home
                # Vous pouvez personnaliser la route de redirection après login
                # toujours dans "form_login", par ex. target_path: home

            # Activer la déconnexion
            logout:
                path: app_logout
                target: app_login
                # si besoin: target: app_home (route de redirection après logout)

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/prof, roles: [ROLE_PROF, ROLE_ADMIN] }
        - { path: ^/stagiaire, roles: ROLE_STAGIAIRE }
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
